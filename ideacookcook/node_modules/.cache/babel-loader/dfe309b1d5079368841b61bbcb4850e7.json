{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benzs\\\\Documents\\\\GitHub\\\\ideacookcook\\\\ideacookcook\\\\src\\\\component\\\\autocomplete.jsx\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./styles/autocompletestyles.css\";\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = async e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value; // Filter our suggestions that don't contain the user's input\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      await this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n      this.updateParent();\n    };\n\n    this.onClick = async e => {\n      await this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: e.currentTarget.innerText\n      });\n      this.updateParent();\n    };\n\n    this.onKeyDown = async e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        await this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false\n        });\n\n        if (this.state.filteredSuggestions.length > 0) {\n          await this.setState({\n            userInput: filteredSuggestions[activeSuggestion]\n          });\n        }\n\n        this.updateParent();\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n          if (activeSuggestion === 0) {\n            return;\n          }\n\n          this.setState({\n            activeSuggestion: activeSuggestion - 1\n          });\n        } // User pressed the down arrow\n        else if (e.keyCode === 40) {\n            if (activeSuggestion - 1 === filteredSuggestions.length) {\n              return;\n            }\n\n            this.setState({\n              activeSuggestion: activeSuggestion + 1\n            });\n          }\n    };\n\n    this.updateParent = () => {\n      this.props.updateParent(this.state.userInput);\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\"\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/React.createElement(\"ul\", {\n          className: \"suggestions\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }\n        }, filteredSuggestions.map((suggestion, index) => {\n          let className; // Flag the active suggestion with a class\n\n          if (index === activeSuggestion) {\n            className = \"suggestion-active\";\n          }\n\n          return /*#__PURE__*/React.createElement(\"li\", {\n            className: className,\n            key: suggestion,\n            onClick: onClick,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 17\n            }\n          }, suggestion);\n        }));\n      } else {\n        suggestionsListComponent = null;\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      placeholder: \"\\u0E04\\u0E49\\u0E19\\u0E2B\\u0E32\\u0E2A\\u0E39\\u0E15\\u0E23\\u0E2D\\u0E32\\u0E2B\\u0E32\\u0E23 ...\",\n      type: \"text\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }), suggestionsListComponent);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/benzs/Documents/GitHub/ideacookcook/ideacookcook/src/component/autocomplete.jsx"],"names":["React","Component","Fragment","PropTypes","Autocomplete","constructor","props","onChange","e","suggestions","userInput","currentTarget","value","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","setState","activeSuggestion","showSuggestions","updateParent","onClick","innerText","onKeyDown","state","keyCode","length","render","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles/autocompletestyles.css\";\r\n\r\nclass Autocomplete extends Component {\r\n  static propTypes = {\r\n    suggestions: PropTypes.instanceOf(Array),\r\n  };\r\n\r\n  static defaultProps = {\r\n    suggestions: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // The active selection's index\r\n      activeSuggestion: 0,\r\n      // The suggestions that match the user's input\r\n      filteredSuggestions: [],\r\n      // Whether or not the suggestion list is shown\r\n      showSuggestions: false,\r\n      // What the user has entered\r\n      userInput: \"\",\r\n    };\r\n  }\r\n\r\n  onChange = async (e) => {\r\n    const { suggestions } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n\r\n    // Filter our suggestions that don't contain the user's input\r\n    const filteredSuggestions = suggestions.filter(\r\n      (suggestion) =>\r\n        suggestion.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n    );\r\n\r\n    await this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions,\r\n      showSuggestions: true,\r\n      userInput: e.currentTarget.value,\r\n    });\r\n    this.updateParent();\r\n  };\r\n\r\n  onClick = async (e) => {\r\n    await this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: e.currentTarget.innerText,\r\n    });\r\n    this.updateParent();\r\n  };\r\n\r\n  onKeyDown = async (e) => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n    // User pressed the enter key\r\n    if (e.keyCode === 13) {\r\n      await this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n      });\r\n      if (this.state.filteredSuggestions.length > 0) {\r\n        await this.setState({\r\n          userInput: filteredSuggestions[activeSuggestion],\r\n        });\r\n      }\r\n      this.updateParent();\r\n    }\r\n    // User pressed the up arrow\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestion === 0) {\r\n        return;\r\n      }\r\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n    }\r\n    // User pressed the down arrow\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n        return;\r\n      }\r\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    }\r\n  };\r\n\r\n  updateParent = () => {\r\n    this.props.updateParent(this.state.userInput);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      state: {\r\n        activeSuggestion,\r\n        filteredSuggestions,\r\n        showSuggestions,\r\n        userInput,\r\n      },\r\n    } = this;\r\n\r\n    let suggestionsListComponent;\r\n\r\n    if (showSuggestions && userInput) {\r\n      if (filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul className=\"suggestions\">\r\n            {filteredSuggestions.map((suggestion, index) => {\r\n              let className;\r\n\r\n              // Flag the active suggestion with a class\r\n              if (index === activeSuggestion) {\r\n                className = \"suggestion-active\";\r\n              }\r\n\r\n              return (\r\n                <li className={className} key={suggestion} onClick={onClick}>\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        suggestionsListComponent = null;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          placeholder=\"ค้นหาสูตรอาหาร ...\"\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          value={userInput}\r\n        />\r\n        {suggestionsListComponent}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}